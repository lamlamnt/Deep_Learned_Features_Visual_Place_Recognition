import numpy as np
import sys
sys.path.append("/home/lamlam/downloads/robotcar-dataset-sdk/python")
import transform

#run 5 - 1432293482893561 
T_P_G1 = np.array([[0.325755, -0.159935, 0.931829, -100.163950],
                    [0.944094, 0.107874, -0.311527, 12.110388], 
                    [-0.050696,0.981215, 0.186135, -0.995578], 
                    [0.000000,0.000000,0.000000,1.000000]])
#run 0 - 1425997174159731 
T_P_G2 = np.array([[0.304358, -0.157201, 0.939497, -101.929334], 
                   [0.951190, 0.102999, -0.290912, 12.579252], 
                   [-0.051036,0.982181,0.180877,-1.058650], 
                   [0.000000,0.000000,0.000000,1.000000]])
#print(np.linalg.inv(T_P_G2)@T_P_G1)

#1425997174159731 
run_0 = np.array([[0.304358,-0.157201, 0.939497, -101.929334], 
                  [0.951190,0.102999,-0.290912,12.579252],
                  [-0.051036, 0.982181,0.180877,-1.058650], 
                  [0.000000,0.000000,0.000000,1.000000]])
#1432293482456130 
run_5 = np.array([[0.329747,-0.154935,0.931269,-96.517670],
                [0.942710,0.106951,-0.316005,10.942598],
                [-0.050640,0.982118,0.181326,-1.011204],
                [0.000000,0.000000,0.000000,1.000000]])

run_5 = np.array([[0.936223,0.117950,-0.331021,-838.365578], 
                  [-0.348835,0.198179,-0.915991,-388.442013], 
                  [-0.042440,0.973043,0.226685,-0.401030], 
                  [0.000000,0.000000,0.000000,1.000000]])

#1425998344377597
run_0 = np.array([[-0.969386,-0.030703,0.243616,-844.180838], 
                  [0.245090,-0.181250,0.952407,-386.738793], 
                  [0.014913,0.982958,0.183226,-0.869577], 
                  [0.000000,0.000000,0.000000,1.000000]])

#print(np.matmul(np.linalg.inv(run_0),run_5))
#print(np.matmul(run_5,np.linalg.inv(run_0)))

xyzrpy = np.array([-2.0582, 0.0894, 0.3675, -0.0119, -0.2498, 3.1283])
rear_extrinsic_seasons = np.asarray(transform.build_se3_transform(xyzrpy))
#print(rear_extrinsic_seasons)


def inverse(matrix):
    #homogenous matrix
    #Get the rotation part
    rot = matrix[:3,:3]
    translate = matrix[:3,3:]
    print(rot.T)
    print(-rot.T@translate)

np.set_printoptions(suppress=True,precision=2)

#run 0 - sun
matrix_1 = np.array([[0.304358, -0.157201, 0.939497, -101.929334],
                     [0.951190, 0.102999, -0.290912, 12.579252], 
                     [-0.051036, 0.982181, 0.180877, -1.058650], 
                     [0.000000, 0.000000, 0.000000, 1.000000]])
#run 5 - overcast summer
matrix_2 = np.array([[0.410711, -0.186093, 0.892573, -192.184827], 
                     [0.911266, 0.051376, -0.408601, 47.165828], 
                     [0.030181, 0.981188,0.190681,-1.188785], 
                     [0.000000,0.000000,0.000000,1.000000]])

T_C_G = np.array([[0,0,1,0],
                  [0,1,0,0],
                  [1,0,0,0],
                  [0,0,0,1]])
product = np.linalg.inv(T_C_G)@(np.linalg.inv(matrix_1)@(matrix_2@T_C_G))
#print(product)
#print(np.linalg.inv(matrix_1)@matrix_2)

#run 0 - sun
matrix_3 = np.array([[-0.997841,-0.052628,0.039302,-600.641657], 
                     [0.048801,-0.193521,0.979882,581.576701], 
                     [-0.043963,0.979684,0.195671,-1.123995], 
                     [0.000000,0.000000,0.000000,1.000000]])
#run 5 - overcast summer 
matrix_4 = np.array([[-0.998614,0.052580,-0.002362,-602.959407], 
                     [-0.013435,-0.211251,0.977340,581.166460],
                     [0.050890, 0.976017,0.211664,-1.791600],
                     [0.000000,0.000000,0.000000,1.000000]])

point = np.array([[5],[4],[1],[1]])

matrix_6 = np.array([[0,0,1,-104],
                     [1,0,0,13],
                     [0,1,0,5],
                     [0,0,0,1]])
matrix_7 = np.array([[0,0,1,-192],
                    [1,0,0,47],
                    [0,1,0,5],
                    [0,0,0,1]])
matrix_special = np.array([[1,0,0,-104],
                           [0,1,0,13],
                           [0,0,1,0],
                           [0,0,0,1]])

matrix_a_2d = np.array([[[0,1,-5],
               [1,0,4],
               [0,0,1]]])
point_2d = np.array([[1],[2],[1]])

#Find the transformation between the 2 
transform_1 = np.array([[0,0,-1,0],
                  [-1,0,0,0],
                  [0,1,0,0],
                  [0,0,0,1]])
transform_2 = np.array([[-1,0,0,0],
                  [0,0,1,0],
                  [0,1,0,0],
                  [0,0,0,1]])

run_0_1 = np.array([[0.302791, -0.166566, 0.938389, -104.341064], 
                    [0.952196, 0.094728, -0.290431, 13.422932], 
                    [-0.040516, 0.981470, 0.187286, -1.111132], 
                    [0.000000, 0.000000, 0.000000, 1.000000]])
run_0_2 = np.array([[0.438444, -0.176934, 0.881170, -192.477545], 
                    [0.898447,0.060462,-0.434900,47.127028],
                    [0.023671,0.982364, 0.185475, -1.184327], 
                    [0.000000, 0.000000, 0.000000, 1.000000]])
run_0_1_new = np.array([[0,0,1,-104],
                        [1,0,0,13],
                        [0,1,0,-1.11],
                        [0,0,0,1]])
run_0_2_new = np.array([[0,0,1,-192],
                        [1,0,0,47],
                        [0,1,0,-1.18],
                        [0,0,0,1]])
T_guess = np.array([[0,1,0,0],
                    [0,0,1,0],
                    [1,0,0,0],
                    [0,0,0,1]])
print(np.linalg.inv(run_0_2)@run_0_1)
print(np.linalg.inv(run_0_2_new)@run_0_1_new)
full = np.linalg.inv(T_guess)@(np.linalg.inv(run_0_2_new)@(run_0_1_new@T_guess))
print(full)
full_real = np.linalg.inv(T_guess)@(np.linalg.inv(run_0_2)@(run_0_1@T_guess))
print(full_real)
print(T_guess@(np.linalg.inv(run_0_2)@(run_0_1@np.linalg.inv(T_guess))))



